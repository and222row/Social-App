"use client";
import { getUserPosts } from "@/lib/Redux/PostsSlice";
//import jwt from "jsonwebtoken";
import { reduxStore } from "@/lib/Redux/ReduxStore";
import { Grid } from "@mui/material";
import { jwtDecode } from "jwt-decode";
//import jwt_decode, { jwtDecode } from "jwt-decode";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { string } from "yup";
import Loading from "../loading";
import { PostType } from "../_interfaces/home.types";
import Post from "../_components/Post/Post";
import CreatePost from "../_components/Post/createPost";
import { useRouter } from "next/navigation";
import Head from "next/head";

export default function Page() {
  const { userData } = useSelector(
    (store: ReturnType<typeof reduxStore.getState>) => store.auth
  );
  const Router = useRouter();
  const { userPosts } = useSelector(
    (store: ReturnType<typeof reduxStore.getState>) => store.posts
  );
  const dispatch = useDispatch<typeof reduxStore.dispatch>();
  interface TokenPayload {
    user: string;
  }

  const getUserFromToken = (): string | null => {
    const token = getToken();
    if (!token) return null;
    const decoded: TokenPayload = jwtDecode(token);
    return decoded.user;
  };
  const getToken = (): string | null => {
    if (typeof window != "undefined") {
      return localStorage.getItem("loggedUser");
    }
    return null;
  };
  const user: string | null = getUserFromToken();
  if (user) {
    console.log(user);
    localStorage.setItem("userId", user);
    console.log(localStorage.getItem("userId"));
  }
  useEffect(() => {
    if (!user) {
      Router.push("/login");
    } else dispatch(getUserPosts(user));
  }, []);
  return (
    <>
      <div>
        <Head>
          <title>Profile</title>
          <meta name="description" content="Generated by create next app" />
          <link
            rel="icon"
            type="image/svg+xml"
            href="src/assets/images/fake-logo.jpg"
          />
        </Head>
        <CreatePost />
        {userPosts ? (
          <Grid container spacing={2}>
            <Grid item xs={3}></Grid>
            <Grid
              item
              md={6}
              xs={12}
              sx={{
                display: "flex",
                flexDirection: "column",
                gap: "20px",
                marginBlock: "20px",
              }}
            >
              {userPosts?.map((postObj: PostType) => (
                <Post key={postObj._id} postObj={postObj} />
              ))}
            </Grid>
            <Grid item xs={3}></Grid>
          </Grid>
        ) : (
          <Loading />
        )}
      </div>
    </>
  );
}
